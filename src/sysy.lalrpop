use crate::ast::*;

// Convention in lalrpop
grammar;

// Lexer

// Ignore whitespace and comments
match {
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  r"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/" => {},
  _
}

IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}

Number: Number = <value: IntConst> => Number { <> };

Ident: Ident = r"[_a-zA-Z][_a-zA-Z0-9]*" => Ident { name: <>.to_string() };

LVal: Exp = {
  <ident: Ident> => Exp::Ident { ident },
};

UnaryOp: UnaryOp = {
  "+" => UnaryOp::Plus,
  "-" => UnaryOp::Minus,
  "!" => UnaryOp::Not,
};

PrimaryExp: Exp = {
  <number: Number> => Exp::Number { value: number },
  "(" <exp: Exp> ")" => exp,
  <lval: LVal> => lval,
};

UnaryExp: Exp = {
    PrimaryExp,
    <unary_op: UnaryOp> <exp: UnaryExp> => Exp::UnaryExp { unary_op, exp: Box::new(exp) },
};

AddExp: Exp = {
    MulExp,
    <add_exp: AddExp> "+" <mul_exp: MulExp> => Exp::BinaryExp {
        binary_op: BinaryOp::Add,
        lhs: Box::new(add_exp),
        rhs: Box::new(mul_exp),
    },
    <add_exp: AddExp> "-" <mul_exp: MulExp> => Exp::BinaryExp {
        binary_op: BinaryOp::Sub,
        lhs: Box::new(add_exp),
        rhs: Box::new(mul_exp),
    }
};

MulExp: Exp = {
    UnaryExp,
    <mul_exp: MulExp> "*" <unary_exp: UnaryExp> => Exp::BinaryExp {
        binary_op: BinaryOp::Mul,
        lhs: Box::new(mul_exp),
        rhs: Box::new(unary_exp),
    },
    <mul_exp: MulExp> "/" <unary_exp: UnaryExp> => Exp::BinaryExp {
        binary_op: BinaryOp::Div,
        lhs: Box::new(mul_exp),
        rhs: Box::new(unary_exp),
    },
    <mul_exp: MulExp> "%" <unary_exp: UnaryExp> => Exp::BinaryExp {
        binary_op: BinaryOp::Mod,
        lhs: Box::new(mul_exp),
        rhs: Box::new(unary_exp),
    }
};

RelExp: Exp = {
    AddExp,
    <rel_exp: RelExp> "<" <add_exp: AddExp> => Exp::BinaryExp {
        binary_op: BinaryOp::Less,
        lhs: Box::new(rel_exp),
        rhs: Box::new(add_exp),
    },
    <rel_exp: RelExp> ">" <add_exp: AddExp> => Exp::BinaryExp {
        binary_op: BinaryOp::Greater,
        lhs: Box::new(rel_exp),
        rhs: Box::new(add_exp),
    },
    <rel_exp: RelExp> "<=" <add_exp: AddExp> => Exp::BinaryExp {
        binary_op: BinaryOp::LessEqual,
        lhs: Box::new(rel_exp),
        rhs: Box::new(add_exp),
    },
    <rel_exp: RelExp> ">=" <add_exp: AddExp> => Exp::BinaryExp {
        binary_op: BinaryOp::GreaterEqual,
        lhs: Box::new(rel_exp),
        rhs: Box::new(add_exp),
    }
};

LAndExp: Exp = {
    EqExp,
    <land_exp: LAndExp> "&&" <eq_exp: EqExp> => Exp::BinaryExp {
        binary_op: BinaryOp::LogicAnd,
        lhs: Box::new(land_exp),
        rhs: Box::new(eq_exp),
    }
};

LOrExp: Exp = {
    LAndExp,
    <lor_exp: LOrExp> "||" <land_exp: LAndExp> => Exp::BinaryExp {
        binary_op: BinaryOp::LogicOr,
        lhs: Box::new(lor_exp),
        rhs: Box::new(land_exp),
    }
};

EqExp: Exp = {
    RelExp,
    <eq_exp: EqExp> "==" <rel_exp: RelExp> => Exp::BinaryExp {
        binary_op: BinaryOp::Equal,
        lhs: Box::new(eq_exp),
        rhs: Box::new(rel_exp),
    },
    <eq_exp: EqExp> "!=" <rel_exp: RelExp> => Exp::BinaryExp {
        binary_op: BinaryOp::NotEqual,
        lhs: Box::new(eq_exp),
        rhs: Box::new(rel_exp),
    }
};

Exp: Exp = {
  LOrExp
};

ConstExp: Exp = {
  <exp: Exp> => exp
};

ConstInitVal: Exp = {
  <const_exp: ConstExp> => const_exp
};

InitVal: Exp = {
  <init_val: Exp> => init_val
};

ConstDef: (Ident, Exp) = {
  <ident: Ident> "=" <exp: ConstInitVal> => (ident, exp)
};

VarDef: (Ident, Option<Exp>) = {
  <ident: Ident> "=" <exp: InitVal> => (ident, Some(exp)),
  <ident: Ident> => (ident, None)
};

ConstDecl: Decl = {
  "const" <btype: BType> <first: ConstDef> <rest: ("," ConstDef)*> ";" => {
    let mut const_defs = vec![first];
    for (_, const_def) in rest {
      const_defs.push(const_def);
    }
    Decl::ConstDecl {
      btype,
      const_defs,
    }
  }
}

VarDecl: Decl = {
  <btype: BType> <first: VarDef> <rest: ("," VarDef)*> ";" => {
    let mut var_defs = vec![first];
    for (_, var_def) in rest {
      var_defs.push(var_def);
    }
    Decl::VarDecl {
      btype,
      var_defs,
    }
  }
};


OtherStmt: Stmt = 
{
  "return" <exp: Exp> ";" => Stmt::Return { exp },
  <lval: LVal> "=" <exp: Exp> ";" => Stmt::Assign {
    ident:
    {if let Exp::Ident { ident } = lval {
      ident
    } else {
      panic!("Expected an identifier")
    }},
    exp
  },
  <option_exp: Exp?> ";" => Stmt::Exp { exp: option_exp },
  <block: Block> => Stmt::Block { block },
}

WithelseStmt: Stmt = 
{
  <other_stmt: OtherStmt> => other_stmt,
  "if" "(" <cond: Exp> ")" <then_stmt: WithelseStmt> "else" <else_stmt: WithelseStmt> => 
  {
    let then_block;
    let else_block;

    if let Stmt::Block { block } = then_stmt {
      then_block = block;
    } else {
      then_block = Block {
        block_items: vec![BlockItem::Stmt { stmt: then_stmt }]
      };
    }
    if let Stmt::Block { block } = else_stmt {
      else_block = block;
    } else {
      else_block = Block {
        block_items: vec![BlockItem::Stmt { stmt: else_stmt }]
      };
    }

    Stmt::If {
    cond,
    then_block: then_block,
    else_block: Some(else_block)
    }
  },
  "while" "(" <cond: Exp> ")" <stmt: WithelseStmt> => 
  {
    if let Stmt::Block { block } = stmt {
      Stmt::While {
        cond,
        block
      }
    } else {
      Stmt::While {
        cond,
        block: Block {
          block_items: vec![BlockItem::Stmt { stmt }]
        }
      }
    }
  }
}

Stmt: Stmt = 
{
  <other_stmt: OtherStmt> => other_stmt,
  "if" "(" <cond: Exp> ")" <then_stmt: Stmt> => {
    let then_block;

    if let Stmt::Block { block } = then_stmt {
      then_block = block;
    } else {
      then_block = Block {
        block_items: vec![BlockItem::Stmt { stmt: then_stmt }]
      };
    }

    Stmt::If {
    cond,
    then_block: then_block,
    else_block: None
    }
  },
  
  "if" "(" <cond: Exp> ")" <then_stmt: WithelseStmt> "else" <else_stmt: Stmt> => {
    let then_block;
    let else_block;

    if let Stmt::Block { block } = then_stmt {
      then_block = block;
    } else {
      then_block = Block {
        block_items: vec![BlockItem::Stmt { stmt: then_stmt }]
      };
    }
    if let Stmt::Block { block } = else_stmt {
      else_block = block;
    } else {
      else_block = Block {
        block_items: vec![BlockItem::Stmt { stmt: else_stmt }]
      };
    }

    Stmt::If {
    cond,
    then_block: then_block,
    else_block: Some(else_block)
    }
  },

  "while" "(" <cond: Exp> ")" <stmt: Stmt> => 
  {
    if let Stmt::Block { block } = stmt {
      Stmt::While {
        cond,
        block
      }
    } else {
      Stmt::While {
        cond,
        block: Block {
          block_items: vec![BlockItem::Stmt { stmt }]
        }
      }
    }
  }
}

Decl: Decl = {
  <const_decl: ConstDecl> => const_decl,
  <var_decl: VarDecl> => var_decl
};


BlockItem: BlockItem = {
  <decl: Decl> => BlockItem::Decl { decl },
  <stmt: Stmt> => BlockItem::Stmt { stmt },
};

Block: Block = {
  "{" <block_items: (BlockItem)*> "}" => Block {
    block_items
  }
};

FuncType: ValType = "int" => ValType::Int;

BType: ValType = "int" => ValType::Int;

FuncDef: FuncDef = {
  <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => {
    FuncDef { <> }
  }
}

pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit { <> };