use crate::ast::*;

// Convention in lalrpop
grammar;

// Lexer

// Ignore whitespace and comments
match {
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  r"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/" => {},
  _
}

IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}

Number: Number = <value: IntConst> => Number { <> };

Ident: Ident = r"[_a-zA-Z][_a-zA-Z0-9]*" => Ident { name: <>.to_string() };

UnaryOp: UnaryOp = {
  "+" => UnaryOp::Plus,
  "-" => UnaryOp::Minus,
  "!" => UnaryOp::Not,
};

Exp: Exp = {
  <number: Number> => Exp::Number { value: number },
  "(" <exp: Exp> ")" => exp,
  <unary_op: UnaryOp> <exp: Exp> => Exp::UnaryExp { unary_op, exp: Box::new(exp) },
};

Stmt: Stmt = "return" <exp: Exp> ";" => Stmt { <> };

Block: Block = "{" <stmt: Stmt> "}" => Block { <> };

FuncType: FuncType = "int" => FuncType::Int;

FuncDef: FuncDef = {
  <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => {
    FuncDef { <> }
  }
}

pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit { <> };